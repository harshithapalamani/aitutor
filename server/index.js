const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// Mock OpenAI responses for development
const generateChatResponse = (message, history = []) => {
  const responses = [
    "That's a great question! Let me help you understand that better. ЁЯШК",
    "Wonderful! You're doing so well with your English practice! ЁЯМЯ",
    "I love how curious you are! Learning English is exciting, isn't it? ЁЯОЙ",
    "That's perfect! Keep practicing and you'll become even better! ЁЯТк",
    "Amazing work! Your English is improving every day! ЁЯЪА",
  ];

  // Simple response based on message content
  if (message.toLowerCase().includes('noun')) {
    return "A noun is a word that names a person, place, or thing! For example: 'cat', 'school', or 'happiness'. Can you think of a noun? ЁЯдФ";
  }
  
  if (message.toLowerCase().includes('verb')) {
    return "A verb is an action word! It tells us what someone or something does. Like 'run', 'jump', or 'sing'. What's your favorite action to do? ЁЯПГтАНтЩВя╕П";
  }

  if (message.toLowerCase().includes('hello') || message.toLowerCase().includes('hi')) {
    return "Hello there! It's wonderful to meet you! I'm so excited to help you learn English today! What would you like to explore? ЁЯСЛтЬи";
  }

  // Return a random encouraging response
  return responses[Math.floor(Math.random() * responses.length)];
};

const generateRoleplayResponse = (scenario, message, history = []) => {
  const scenarioResponses = {
    school: [
      "That's wonderful! What's your favorite subject in school? ЁЯУЪ",
      "Great! Do you have many friends at school? ЁЯСл",
      "Excellent! Learning is so much fun, isn't it? ЁЯОУ",
    ],
    store: [
      "Perfect! That costs 10 rupees. Do you have the money? ЁЯТ░",
      "Great choice! Would you like anything else? ЁЯЫТ",
      "Wonderful! Here's your item. Have a great day! ЁЯШК",
    ],
    home: [
      "That sounds lovely! What's your favorite thing to do with your family? ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж",
      "Wonderful! Helping at home is very important! ЁЯПа",
      "Great! Family time is the best time, isn't it? тЭдя╕П",
    ],
    restaurant: [
      "Excellent choice! That will be ready in 10 minutes. ЁЯН╜я╕П",
      "Perfect! Would you like anything else to drink? ЁЯед",
      "Great! Your food is coming right up! ЁЯШЛ",
    ]
  };

  const responses = scenarioResponses[scenario.id] || scenarioResponses.school;
  return responses[Math.floor(Math.random() * responses.length)];
};

// Routes
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', message: 'SpeakGenie API is running!' });
});

app.post('/api/chat', (req, res) => {
  try {
    const { message, history } = req.body;
    
    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }

    const response = generateChatResponse(message, history);
    
    res.json({ response });
  } catch (error) {
    console.error('Chat API error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.post('/api/roleplay', (req, res) => {
  try {
    const { scenario, message, history } = req.body;
    
    if (!scenario || !message) {
      return res.status(400).json({ error: 'Scenario and message are required' });
    }

    const response = generateRoleplayResponse(scenario, message, history);
    
    res.json({ response });
  } catch (error) {
    console.error('Roleplay API error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.post('/api/translate', (req, res) => {
  try {
    const { text, targetLanguage } = req.body;
    
    if (!text || !targetLanguage) {
      return res.status(400).json({ error: 'Text and target language are required' });
    }

    // Mock translation - in production, use Google Translate API or similar
    const translations = {
      'hi-IN': {
        'Hello': 'рдирдорд╕реНрддреЗ',
        'Thank you': 'рдзрдиреНрдпрд╡рд╛рдж',
        'Good morning': 'рд╕реБрдкреНрд░рднрд╛рдд',
        'How are you?': 'рдЖрдк рдХреИрд╕реЗ рд╣реИрдВ?'
      },
      'mr-IN': {
        'Hello': 'рдирдорд╕реНрдХрд╛рд░',
        'Thank you': 'рдзрдиреНрдпрд╡рд╛рдж',
        'Good morning': 'рд╕реБрдкреНрд░рднрд╛рдд',
        'How are you?': 'рддреБрдореНрд╣реА рдХрд╕реЗ рдЖрд╣рд╛рдд?'
      }
    };

    const translation = translations[targetLanguage]?.[text] || text;
    
    res.json({ translation });
  } catch (error) {
    console.error('Translation API error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

app.listen(PORT, () => {
  console.log(`ЁЯзЮтАНтЩВя╕П SpeakGenie API server running on port ${PORT}`);
  console.log(`ЁЯМЯ Health check: http://localhost:${PORT}/api/health`);
});

module.exports = app;